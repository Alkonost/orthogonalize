\name{orthogonalize}
\alias{orthogonalize}
\title{
 Orthogonalizing covariates. 
}
\description{
 Provides functionality to create residualized scores via linear 
 regression more quickly and conveniently than \code{lm}. 
}
\usage{
orthogonalize(formula, data, intercept, group)
}
\arguments{
  \item{formula}{
    a character vector or an object of class \code{"formula"} specifying the outcome
	variable to be residualized and a predictor set to residualize the
	outcome scores on using linear regression. 
  }
  \item{data}{
	a \code{"data.frame"} object containing the data set.  
  }
  \item{intercept}{
	a \code{"logical"} value indicating whether or not to include an
	intercept term in the linear regression model during
	residualization. 
  }
  \item{group}{
  an optional \code{"numeric"} or \code{"factor"} vector that
  specifies subsets of the data for within-group residualization. Can
  also be a "character" value specifying the column name of the
  grouping variable if it is attached to the \code{"data.frame"}
  provided to the \code{data} argument. 
  }
}
\details{
  This function can be used to write the tertiary information about the
  status of a PcAux function run to disk. The information consists of the
  operating system, session information and the system RAM/CPU hardware
  and usage during a PcAux run. This functionality works in tandem with
  the control list parameter \code{checkStatus}, which has options
  "all", "start", and "none", which is the default option. Selecting
  "start" will record the initial session/OS information and the usage
  during the beginning of the function. On the other hand, "all", will
  record the initial session/OS information and will also record usage
  at each interval within the given PcAux function. After the desired
  infromation has been recorded within the PcAux object through the use
  of \code{checkStatus}, \code{writeStatus} can be used to extract it
  into a text file.
}
\value{
  A string object containing the compiled system and OS information. 
}
\author{
  Pavel Panko
}
\seealso{
  \code{\link{calcTime}}
}
\examples{
## Load the data:
data(iris2)

## Prepare the data:
cleanData <- prepData(rawData   = iris2,
                      nomVars   = "Species",
                      ordVars   = "Petal.Width",
                      idVars    = "ID",
                      dropVars  = "Junk",
                      groupVars = "Species",
                      control   = list(checkStatus = "all")
                      )

## Create principal component auxiliary variables:
pcAuxOut <- createPcAux(pcAuxData    = cleanData,
                        nComps       = c(3, 2),
                        interactType = 2)

## Conduct MI with the pcAux:
miOut <- miWithPcAux(rawData   = iris2,
                     pcAuxData = pcAuxOut,
                     nImps     = 5)

## Extract timing infromation:
writeStatus(pcAuxData = miOut, outName = "miOutStatus.txt", what = "mi")
}
